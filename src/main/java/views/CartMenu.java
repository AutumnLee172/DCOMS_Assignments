/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package views;

import RMI_Structures.Cart;
import RMI_Structures.Customer;
import RMI_Structures.RMIinterface;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author PC
 */
public class CartMenu extends javax.swing.JFrame {

    Customer LoggedCustomer = new Customer("test", "test", "C1");
    DefaultTableModel model;
    ArrayList<Cart> cartlist = new ArrayList<Cart>();
    RMIinterface Obj;

    /**
     * Creates new form Cart
     */
    //public CartMenu() {
    //     initComponents();
    // }
    public CartMenu() {
        //this.LoggedCustomer = cm;
        initComponents();
        lblCartTitle.setText(LoggedCustomer.getName() + "'s Cart ");

        //load all cart info into table    
        try {
            Obj = (RMIinterface) Naming.lookup("rmi://localhost:1040/KGF");
            cartlist = Obj.getCustomerCart(LoggedCustomer.getID());

            String ProductName, cartID,prodID;
            double ProductPrice, totalPrice;
            int quantity = 0;
            boolean select = false;

            for (int i = 0; i < cartlist.size(); i++) {
                //i looping is the total car items to be printed

                ProductName = Obj.findProductName(cartlist.get(i).getProductID());
                ProductPrice = Obj.findProductPrice(cartlist.get(i).getProductID());
                quantity = cartlist.get(i).getQuantity();
                totalPrice = quantity * ProductPrice;
                cartID = cartlist.get(i).getCartID();
                prodID = cartlist.get(i).getProductID();

                Object rowData[] = {ProductName, quantity, totalPrice, select, cartID,prodID};

                model = (DefaultTableModel) TableCartList.getModel();
                model.addRow(rowData);
            }

        } catch (RemoteException | NotBoundException | MalformedURLException ex) {
            Logger.getLogger(CartMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
        //edit quantity listener
        if (model != null && model.getRowCount() > 0) {model.addTableModelListener(cartTableListener);}
        //hide id(s) column
        TableCartList.removeColumn(TableCartList.getColumnModel().getColumn(5));
        TableCartList.removeColumn(TableCartList.getColumnModel().getColumn(4));
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblCartTitle = new javax.swing.JLabel();
        AddCartTest = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableCartList = new javax.swing.JTable();
        btnRemove = new javax.swing.JButton();
        btnCheckout = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblCartTitle.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblCartTitle.setText("Customer Name's Cart");

        AddCartTest.setText("AddCartTest");
        AddCartTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddCartTestActionPerformed(evt);
            }
        });

        TableCartList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Name", "Quantity", "Total Cost", "Select", "CartID", "ProdID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableCartList.setAutoscrolls(false);
        TableCartList.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(TableCartList);
        if (TableCartList.getColumnModel().getColumnCount() > 0) {
            TableCartList.getColumnModel().getColumn(0).setPreferredWidth(250);
            TableCartList.getColumnModel().getColumn(1).setPreferredWidth(10);
            TableCartList.getColumnModel().getColumn(2).setPreferredWidth(10);
            TableCartList.getColumnModel().getColumn(3).setPreferredWidth(50);
            TableCartList.getColumnModel().getColumn(3).setMaxWidth(50);
            TableCartList.getColumnModel().getColumn(4).setResizable(false);
            TableCartList.getColumnModel().getColumn(5).setResizable(false);
        }

        btnRemove.setText("Remove Selected");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnCheckout.setText("Checkout");
        btnCheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblCartTitle)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 687, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AddCartTest)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnCheckout))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnRemove)))))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(lblCartTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnRemove)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(AddCartTest)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCheckout, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void AddCartTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddCartTestActionPerformed
        String CustomerID = LoggedCustomer.getID();
        try {
            RMIinterface Obj = (RMIinterface) Naming.lookup("rmi://localhost:1040/KGF");
            Obj.addToCart(CustomerID, "1", 1);

        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
            Logger.getLogger(CartMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_AddCartTestActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        int input = JOptionPane.showConfirmDialog(this,
                "Are you sure about removing the selected items?", "Remove confirmation ",
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
        if (input == JOptionPane.OK_OPTION) {

            ArrayList<String> deletingItems = new ArrayList<>();
            ArrayList<Integer> rowsToRemove = new ArrayList<>();

            for (int i = 0; i < model.getRowCount(); i++) {
                Boolean checked = (Boolean) model.getValueAt(i, 3);

                if (checked) {
                    deletingItems.add((String) model.getValueAt(i, 4));
                    rowsToRemove.add(i);
                }
            }

            // Remove rows outside of the loop
            for (int i = rowsToRemove.size() - 1; i >= 0; i--) {
                model.removeRow(rowsToRemove.get(i));
            }

            //Once we have the list to delete cart item, run delete cart function
            try {
                Obj.deleteCartItem(deletingItems);
            } catch (RemoteException ex) {
                Logger.getLogger(CartMenu.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnCheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckoutActionPerformed

        ArrayList<String> pickedItems = new ArrayList<>();
        for (int i = 0; i < model.getRowCount(); i++) {
                Boolean checked = (Boolean) model.getValueAt(i, 3);

                if (checked) {
                    pickedItems.add((String) model.getValueAt(i, 5));
                    pickedItems.add((String) model.getValueAt(i, 1));
                }
            }   
        
        CheckOut CO = new CheckOut(LoggedCustomer,this,pickedItems);
        CO.setVisible(true);
        this.setVisible(false);
        
        
    }//GEN-LAST:event_btnCheckoutActionPerformed

    TableModelListener cartTableListener = new TableModelListener() {
        @Override
        public void tableChanged(TableModelEvent e) {
            // Check if the event was triggered by a cell update
            if (e.getType() == TableModelEvent.UPDATE && e.getColumn() == 1) {
                
                int row = e.getFirstRow();
                int column = e.getColumn();
                Object newQuantity = model.getValueAt(row, column);
                String itemID = (String) model.getValueAt(row, 4);
                
                try {
                    if ((Integer) newQuantity <= 0) {
                        //update the specific item's quantity = 0(also meant removed)               
                        Obj.updateCartQuantity(itemID, 0);
                        model.removeRow(row);

                    } else {
                        Obj.updateCartQuantity(itemID, (Integer)newQuantity);                       
                    }

                } catch (RemoteException ex) {
                    Logger.getLogger(CartMenu.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    };

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CartMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CartMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CartMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CartMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CartMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddCartTest;
    private javax.swing.JTable TableCartList;
    private javax.swing.JButton btnCheckout;
    private javax.swing.JButton btnRemove;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblCartTitle;
    // End of variables declaration//GEN-END:variables
}
